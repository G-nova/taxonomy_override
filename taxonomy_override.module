<?php
module_load_include('inc', 'taxonomy_override', 'taxonomy_override.queries');

/*
 * Overrides taxonomy default callback.
 */
function taxonomy_override_menu_alter(&$items) {
  $items['taxonomy/term/%']['page callback']    = '_taxonomy_override_taxonomy_override_pages';
  $items['taxonomy/term/%']['page arguments']    = array(2);
  // Optional
  $items['taxonomy/term/%']['access callback'] = 'user_access';
  $items['taxonomy/term/%']['access arguments'] = array('access content');
}

/**
 *
 * Taxonomy callback page to modify display's behavior,
 * on a taxonomy term page.
 *
 * @param $term Term concerned by page display.
 */
function _taxonomy_override_taxonomy_override_pages($tid = '') {
  if (is_object($tid)) {
    $tid = $tid->tid;
  }
  $term = taxonomy_get_term($tid);
  /*
   * Retrieve eventually associated callback with machine name.
   */

  $association = _taxonomy_override_get_association_by_vid($term->vid);
  if (!empty($association) && $association['callback_function']) {
    $callback = $association['callback_function'];
    if (function_exists($callback)) {
      $out = $callback($tid);
      if ($out) {
        if (module_exists('context')) {
          // Fire Context behavior if Context is enabled.
          $plugin = context_get_plugin('condition', 'taxonomy_term');
          $plugin->execute($term, 'view');
        }
        return $out;
      }
      else {
        drupal_set_message(t('Callback function doesn\'t return any content. Please check this page\'s callback function and return either HTML or renderable array.'), 'warning');
      }
    }
    else {
      drupal_set_message(t('Callback associated with this page doesn\'t seem to exist. Default taxonomy term page has been displayed by default.'), 'warning');
    }
  }

  /*
   * No specific behavior : we load classic taxonomy page view.
   */
  module_load_include('inc','taxonomy','taxonomy.pages');
  return taxonomy_term_page($tid);
}

/**
 * Gets all available callbacks
 * @return array
 */
function taxonomy_override_get_available_callbacks() {
  $callbacks = &drupal_static(__FUNCTION__);
  if (!isset($callbacks)) {
    $callbacks = module_invoke_all('taxonomy_override_define_callback');
  }
  return $callbacks;
}

function taxonomy_override_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'taxonomy_form_vocabulary') {
    // do not alter on deletion
    if (isset($form_state['confirm_delete']) && isset($form_state['values']['vid'])) {
      return;
    }
    $availableCallbacks = taxonomy_override_get_available_callbacks();
    if(!empty($availableCallbacks)) {
      $form['taxonomy_override'] = array(
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#title' => t('Taxonomy Override'),
        '#weight' => 15
      );

      $availableCallbacks = array_combine($availableCallbacks, $availableCallbacks);
      $currentVid = $form['vid']['#value'];
      $currentAssociation = _taxonomy_override_get_association_by_vid($currentVid);
      array_unshift($availableCallbacks, t('-Default-'));
      $form['taxonomy_override'] = array(
        '#type' => 'select',
        '#options' => $availableCallbacks,
        '#title' => t('Callback display to use')
      );
      if (!empty($currentAssociation) && $currentAssociation['callback_function']) {
        $form['taxonomy_override']['#default_value'] = $currentAssociation['callback_function'];
      }
    }
    $form['#submit'][] = '_taxonomy_override_vocabulary_form_submit';
  }
}

/**
 * Vocabulary form's submit handler in order to manage callback
 * modification.
 */
function _taxonomy_override_vocabulary_form_submit($form, &$form_state) {
  $callback = $form_state['values']['taxonomy_override'];
  $vid = $form_state['values']['vid'];
  $oldAssoc = _taxonomy_override_get_association_by_vid($vid);
  if ((!$callback && empty($oldAssoc)) || $oldAssoc['callback_function'] == $callback) {
    return;
  }
  /*
   * We add associated callback with machine name of taxonomy.
   * If a callback already exists, we update it.
   */
  if ($callback) {
    if (empty($oldAssoc)) {
      _taxonomy_override_add_association($vid, $callback);
    }
    else {
      _taxonomy_override_update_association($vid, $callback);
    }
  }
  else {
    /*
     * Callback 0 => Default value => We delete the association.
     */
    _taxonomy_overide_delete_association_by_vid($vid);
  }
}

/**
 * Implements hook_taxonomy_vocabulary_delete().
 */
function taxonomy_override_taxonomy_vocabulary_delete($vocabulary) {
  _taxonomy_overide_delete_association_by_vid($vocabulary->vid);
}
